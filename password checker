import tkinter as tk
from tkinter import ttk, messagebox
import re
import random
import string
from nltk.corpus import words # Ensure you have run: nltk.download('words')

class PasswordAnalyzerApp:
    def __init__(self, master):
        self.master = master
        master.title("Password Strength Analyzer & Generator")
        master.geometry("600x550") # Adjusted size for new features
        master.resizable(False, False) # Prevent resizing for simplicity

        # Apply a modern theme
        self.style = ttk.Style()
        self.style.theme_use('clam') # 'clam', 'alt', 'default', 'classic'

        # Configure some styles for better aesthetics
        self.style.configure('TLabel', font=('Inter', 10))
        self.style.configure('TButton', font=('Inter', 10, 'bold'), padding=8)
        self.style.configure('TEntry', font=('Inter', 10), padding=5)
        self.style.configure('TText', font=('Inter', 10), padding=5)

        # Main frame for padding and structure
        main_frame = ttk.Frame(master, padding="20 20 20 20")
        main_frame.pack(fill=tk.BOTH, expand=True)

        # --- Password Input Section ---
        password_input_frame = ttk.LabelFrame(main_frame, text="Your Password", padding="15 10 15 15")
        password_input_frame.pack(pady=10, fill=tk.X)

        ttk.Label(password_input_frame, text="Enter Password:").pack(pady=(0, 5), anchor='w')
        self.password_entry = ttk.Entry(password_input_frame, show="*", width=50) # show="*" hides the input
        self.password_entry.pack(pady=5, fill=tk.X)
        self.password_entry.bind("<KeyRelease>", self.analyze_password_live) # Live analysis

        # --- Strength Feedback Section ---
        strength_frame = ttk.LabelFrame(main_frame, text="Strength Feedback", padding="15 10 15 15")
        strength_frame.pack(pady=10, fill=tk.X)

        self.strength_label_text = ttk.Label(strength_frame, text="Overall Strength:")
        self.strength_label_text.pack(side=tk.LEFT, padx=(0, 10))

        self.strength_value_label = ttk.Label(strength_frame, text="N/A", font=("Inter", 14, "bold"))
        self.strength_value_label.pack(side=tk.LEFT, expand=True, fill=tk.X)

        # --- Suggestions Section ---
        suggestions_frame = ttk.LabelFrame(main_frame, text="Improvement Suggestions", padding="15 10 15 15")
        suggestions_frame.pack(pady=10, fill=tk.BOTH, expand=True)

        self.suggestions_text = tk.Text(suggestions_frame, height=8, width=50, state='disabled', wrap='word',
                                        background="#f0f0f0", relief="flat", borderwidth=0)
        self.suggestions_text.pack(pady=5, fill=tk.BOTH, expand=True)

        # --- Strong Password Generator Section ---
        generator_frame = ttk.LabelFrame(main_frame, text="Generate Strong Password", padding="15 10 15 15")
        generator_frame.pack(pady=10, fill=tk.X)

        ttk.Label(generator_frame, text="Generated Password:").pack(pady=(0, 5), anchor='w')
        self.generated_password_display = ttk.Entry(generator_frame, width=50, state='readonly')
        self.generated_password_display.pack(pady=5, fill=tk.X)

        generate_button = ttk.Button(generator_frame, text="Generate New Strong Password", command=self.generate_strong_password)
        generate_button.pack(pady=5)

        copy_button = ttk.Button(generator_frame, text="Copy Generated Password", command=self.copy_generated_password)
        copy_button.pack(pady=5)

        # Load dictionary words once at startup for efficiency
        try:
            self.dictionary_words = set(words.words())
        except LookupError:
            messagebox.showerror("NLTK Data Missing",
                                 "NLTK 'words' corpus not found. Please run 'python -c \"import nltk; nltk.download(\'words\')\"' in your terminal.")
            self.dictionary_words = set() # Set to empty if not found

        # Initial analysis on startup (for empty password)
        self.analyze_password()

    def analyze_password_live(self, event=None):
        """Triggers analysis as the user types."""
        self.analyze_password()

    def analyze_password(self):
        """Analyzes the entered password and updates the GUI."""
        password = self.password_entry.get()
        strength_category, suggestions = self._get_password_strength_details(password)

        # Update strength label and color
        self.strength_value_label.config(text=strength_category)
        if strength_category == "Very Weak":
            self.strength_value_label.config(foreground="#e74c3c") # Red
        elif strength_category == "Weak":
            self.strength_value_label.config(foreground="#e67e22") # Orange
        elif strength_category == "Moderate":
            self.strength_value_label.config(foreground="#f1c40f") # Yellow
        elif strength_category == "Strong":
            self.strength_value_label.config(foreground="#2ecc71") # Green
        elif strength_category == "Very Strong":
            self.strength_value_label.config(foreground="#27ae60") # Dark Green
        else: # N/A or initial state
            self.strength_value_label.config(foreground="gray")

        # Update suggestions text area
        self.suggestions_text.config(state='normal') # Enable editing
        self.suggestions_text.delete(1.0, tk.END) # Clear previous content
        if suggestions:
            for suggestion in suggestions:
                self.suggestions_text.insert(tk.END, f"â€¢ {suggestion}\n")
        else:
            self.suggestions_text.insert(tk.END, "No specific suggestions. Keep up the good work!")
        self.suggestions_text.config(state='disabled') # Disable editing

    def _get_password_strength_details(self, password):
        """
        Calculates password strength based on various criteria and provides suggestions.
        Returns a tuple: (strength_category_string, list_of_suggestions)
        """
        score = 0
        suggestions = []

        if not password:
            return "N/A", ["Please enter a password to analyze."]

        # 1. Length Check
        if len(password) < 8:
            suggestions.append("Password is too short. Aim for at least 12-16 characters.")
            score -= 2 # Strong penalty
        elif 8 <= len(password) < 12:
            suggestions.append("Consider making your password longer (12+ characters is ideal).")
            score += 1
        else: # >= 12 characters
            score += 3 # Good length bonus

        # 2. Character Type Checks (using Regex)
        has_lower = bool(re.search(r'[a-z]', password))
        has_upper = bool(re.search(r'[A-Z]', password))
        has_digit = bool(re.search(r'\d', password))
        # More comprehensive special characters
        has_special = bool(re.search(r'[!@#$%^&*()_+={}\[\]:;"\'<>,.?/~`\\|-]', password))

        if not has_lower:
            suggestions.append("Include lowercase letters.")
        else:
            score += 1
        if not has_upper:
            suggestions.append("Include uppercase letters.")
        else:
            score += 1
        if not has_digit:
            suggestions.append("Include numbers.")
        else:
            score += 1
        if not has_special:
            suggestions.append("Include special characters (e.g., !@#$%^&*).")
        else:
            score += 1

        # 3. Common Pattern Checks (using Regex)
        # Check for simple repetitions (e.g., "aaaa" or "111")
        if re.search(r'(.)\1\1\1', password): # 4 or more consecutive identical characters
            suggestions.append("Avoid repeating the same character four or more times consecutively.")
            score -= 2 # Penalize for predictability

        # Check for simple sequential characters (e.g., "abc", "123")
        # This is a simplified check; a more robust one would iterate through sequences
        if re.search(r'abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz', password.lower()) or \
           re.search(r'012|123|234|345|456|567|678|789|890', password):
            suggestions.append("Avoid common sequential patterns (e.g., 'abc', '123').")
            score -= 1

        # 4. Dictionary Word Detection (NLTK)
        is_dictionary_word = False
        password_lower = password.lower()
        if password_lower in self.dictionary_words:
            is_dictionary_word = True
        else:
            # Check if common dictionary words are substrings (e.g., "mypassword123")
            # This can be computationally intensive for very large dictionaries
            for word in self.dictionary_words:
                if len(word) > 4 and word in password_lower: # Check for words longer than 4 chars
                    is_dictionary_word = True
                    break

        if is_dictionary_word:
            suggestions.append("Avoid using common dictionary words or simple variations.")
            score -= 3 # Strong penalty

        # Determine strength category based on final score
        if score < 0:
            strength_category = "Very Weak"
        elif score < 3:
            strength_category = "Weak"
        elif score < 6:
            strength_category = "Moderate"
        elif score < 8:
            strength_category = "Strong"
        else:
            strength_category = "Very Strong"

        # If no specific suggestions, but not very strong, add a general positive one
        if not suggestions and password:
            if strength_category == "Very Strong":
                suggestions.append("Outstanding password! You've got this!")
            elif strength_category == "Strong":
                suggestions.append("Excellent password! Keep it long and combine different character types.")
            else:
                suggestions.append("Looks good! For even more security, consider increasing length or adding more character types.")


        return strength_category, suggestions

    def generate_strong_password(self, length=16):
        """Generates a strong, random password."""
        characters = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation
        password = ''.join(random.choice(characters) for i in range(length))

        # Ensure the generated password meets basic criteria (at least one of each type)
        # This loop ensures a mix, regenerating if necessary.
        while (not re.search(r'[a-z]', password) or
               not re.search(r'[A-Z]', password) or
               not re.search(r'\d', password) or
               not re.search(r'[!@#$%^&*()_+={}\[\]:;"\'<>,.?/~`\\|-]', password)):
            password = ''.join(random.choice(characters) for i in range(length))

        self.generated_password_display.config(state='normal') # Enable writing
        self.generated_password_display.delete(0, tk.END)
        self.generated_password_display.insert(0, password)
        self.generated_password_display.config(state='readonly') # Disable editing

        # Optionally, analyze the generated password to show its strength
        self.password_entry.delete(0, tk.END)
        self.password_entry.insert(0, password)
        self.analyze_password() # Trigger analysis for the generated password

    def copy_generated_password(self):
        """Copies the generated password to the clipboard."""
        password = self.generated_password_display.get()
        if password:
            try:
                # Use Tkinter's clipboard methods
                self.master.clipboard_clear()
                self.master.clipboard_append(password)
                messagebox.showinfo("Copied!", "Generated password copied to clipboard.")
            except Exception as e:
                messagebox.showerror("Copy Error", f"Failed to copy to clipboard: {e}")
        else:
            messagebox.showwarning("No Password", "No password generated yet to copy.")

# Main application loop
if __name__ == "__main__":
    # It's good practice to download NLTK data before starting the GUI
    # This prevents the GUI from freezing if it needs to download.
    try:
        nltk.data.find('corpora/words')
    except LookupError:
        print("NLTK 'words' corpus not found. Downloading now...")
        nltk.download('words')
        print("Download complete.")

    root = tk.Tk()
    app = PasswordAnalyzerApp(root)
    root.mainloop()
